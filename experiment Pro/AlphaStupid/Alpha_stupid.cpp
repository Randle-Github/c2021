/*本alpha stupid运用简化版机器学习遗传算法模型对于棋手策略参数进行优化;
用棋手互相对局，每一代进行排名，对局获胜的靠前，优秀的棋手互相交配（参数取均值）；
由于仅用本机CPU生一代就要1个小时左右，所以我仅仅繁殖了四代（本应跑上万代才有点用）
数据如下：（靠前的五个比较优秀，后五个是每一代新生成的）
generation=0:
0:402.000000 1:218.000000 2:71.000000 3:33.000000 4:13.000000 5:1.000000 6:1.000000
0:790.000000 1:409.000000 2:146.000000 3:54.000000 4:8.000000 5:5.000000 6:1.000000
0:597.000000 1:300.000000 2:65.000000 3:22.000000 4:9.000000 5:1.000000 6:1.000000
0:687.000000 1:104.000000 2:97.000000 3:21.000000 4:13.000000 5:2.000000 6:1.000000
0:652.000000 1:178.000000 2:77.000000 3:44.000000 4:20.000000 5:3.000000 6:1.000000
0:388.000000 1:281.000000 2:113.000000 3:40.000000 4:14.000000 5:1.000000 6:1.000000
0:1274.000000 1:375.000000 2:91.000000 3:18.000000 4:7.000000 5:4.000000 6:1.000000
0:521.000000 1:341.000000 2:66.000000 3:51.000000 4:11.000000 5:1.000000 6:1.000000
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000
0:902.000000 1:144.000000 2:105.000000 3:61.000000 4:20.000000 5:2.000000 6:1.000000
generation=1:
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000
0:687.000000 1:104.000000 2:97.000000 3:21.000000 4:13.000000 5:2.000000 6:1.000000
0:402.000000 1:218.000000 2:71.000000 3:33.000000 4:13.000000 5:1.000000 6:1.000000
0:790.000000 1:409.000000 2:146.000000 3:54.000000 4:8.000000 5:5.000000 6:1.000000
0:597.000000 1:300.000000 2:65.000000 3:22.000000 4:9.000000 5:1.000000 6:1.000000
0:596.000000 1:313.500000 2:108.500000 3:43.500000 4:10.500000 5:3.000000 6:1.000000 
0:867.000000 1:352.500000 2:97.500000 3:40.000000 4:8.000000 5:4.000000 6:1.000000
0:790.000000 1:409.000000 2:146.000000 3:54.000000 4:8.000000 5:5.000000 6:1.000000
0:596.000000 1:313.500000 2:108.500000 3:43.500000 4:10.500000 5:3.000000 6:1.000000
0:842.000000 1:124.000000 2:61.000000 3:36.000000 4:21.000000 5:4.000000 6:1.000000
generation=2:
0:596.000000 1:313.500000 2:108.500000 3:43.500000 4:10.500000 5:3.000000 6:1.000000
0:867.000000 1:352.500000 2:97.500000 3:40.000000 4:8.000000 5:4.000000 6:1.000000 
0:597.000000 1:300.000000 2:65.000000 3:22.000000 4:9.000000 5:1.000000 6:1.000000
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000
0:687.000000 1:104.000000 2:97.000000 3:21.000000 4:13.000000 5:2.000000 6:1.000000
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000
0:770.500000 1:298.000000 2:57.000000 3:24.000000 4:8.500000 5:2.000000 6:1.000000
0:731.500000 1:333.000000 2:103.000000 3:41.750000 4:9.250000 5:3.500000 6:1.000000 
0:770.500000 1:298.000000 2:57.000000 3:24.000000 4:8.500000 5:2.000000 6:1.000000
0:867.000000 1:127.000000 2:55.000000 3:25.000000 4:12.000000 5:2.000000 6:1.000000
generation=3:
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000  
0:687.000000 1:104.000000 2:97.000000 3:21.000000 4:13.000000 5:2.000000 6:1.000000 
0:596.000000 1:313.500000 2:108.500000 3:43.500000 4:10.500000 5:3.000000 6:1.000000 
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000   
0:731.500000 1:333.000000 2:103.000000 3:41.750000 4:9.250000 5:3.500000 6:1.000000  
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000   
0:857.000000 1:300.375000 2:63.875000 3:30.375000 4:8.625000 5:3.000000 6:1.000000   
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000   
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000   
0:1160.000000 1:345.000000 2:70.000000 3:33.000000 4:9.000000 5:1.000000 6:1.000000 
generation=4:
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000
0:687.000000 1:104.000000 2:97.000000 3:21.000000 4:13.000000 5:2.000000 6:1.000000
0:596.000000 1:313.500000 2:108.500000 3:43.500000 4:10.500000 5:3.000000 6:1.000000
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000
0:731.500000 1:333.000000 2:103.000000 3:41.750000 4:9.250000 5:3.500000 6:1.000000 
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000
0:944.000000 1:296.000000 2:49.000000 3:26.000000 4:8.000000 5:3.000000 6:1.000000
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000
0:1007.000000 1:336.000000 2:124.000000 3:27.000000 4:14.000000 5:4.000000 6:1.000000
这一个棋手目前看来比较优秀：
0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000
与玩家的对战在game_start函数，wasd进行移动，j进行落子。运用第四代最优棋手
的参数，本alpha_stupid的能力并不是很强，因为只设置了七种判断情形（这方面我无心优化，没有太
大的兴趣）。本次由于时间问题暂时没有用Unity进行图形优化，后续将使用Unity对界面进行设计；
*/
#include "functions.cpp"
#include "game_start.cpp"
int main()
{
    srand(time(NULL));
    cout << "whether to machine learning for 5 hours before play?" << endl
         << "print y for yes, n for no" << endl;
    char c = getchar();
    if (c == 'y') //如果愿意机器自己学习十个小时左右；
    {
        for (int i = 1; i <= total_num; i++)
            node[i].create();
        printf("generation=%d:\n", 0);
        for (int i = 1; i <= total_num; i++)
            node[i].show_parameter();
        for (int generation = 1; generation <= generations; ++generation) //进化代数，确定最优解；
        {
            GA();
            printf("generation=%d:\n", generation);
            for (int i = 1; i <= total_num; i++)
                node[i].show_parameter();
        }
    }
    else
    {
        node[1].weight[0] = 10000;
        node[1].weight[1] = 304.75;
        node[1].weight[2] = 78.75;
        node[1].weight[3] = 34.75;
        node[1].weight[4] = 9.25;
        node[1].weight[5] = 3;
        node[1].weight[6] = 1;
        game_start(); //上面皆为机器学习内容，学习完成后玩家可与node[1]对战
        //这组参数较为优秀 0:770.000000 1:304.750000 2:78.750000 3:34.750000 4:9.250000 5:3.000000 6:1.000000
    }
    return 0;
}